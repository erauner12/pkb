#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+TITLE: Docker

* Links

https://app.pluralsight.com/library/courses/docker-getting-started/table-of-contents


* Commands
test
starts a new container
#+BEGIN_SRC go
docker run
#+END_SRC
test
copies images to the docker ost
#+BEGIN_SRC go
docker pull
#+END_SRC
test
#+CAPTION:lists images on the docker host
#+BEGIN_SRC go
docker images
#+END_SRC
test
#+CAPTION:removes images from the docker host
#+BEGIN_SRC go
docker rmi
#+END_SRC
test
#+CAPTION:lists running containers
#+BEGIN_SRC go
docker ps
#+END_SRC
test
#+CAPTION:stops running containers
#+BEGIN_SRC go
docker stop
#+END_SRC

removes (deletes) stopped containers
#+CAPTION:removes (deletes) stopped containers
#+BEGIN_SRC go
docker rm
#+END_SRC


* Course Overview

** Course Overview



* Course Introduction

** Introduction


- Docker and containers massive pasrt of the future of IT.

  - just finished the big picture

  - install docker

  - working with containers

  - working with apps

- kubernetes is a bigger deal but docker swarm is also on the map


- quick refresher

  - modern day apps are made up of services

    - need an orchestration layer like kubernetes

      - going to see how to install it on various platforms

      - going to finish play finish and play around
 

* Installing Docker

** Module Intro

- you can isntall on various platforms

  - window
  - linux
  - mac

- 

  - on prem
  - cloud
  - local


- This course will be doing docker on AWS


** Docker for Windows

- Windows 10 64 bit only

  - install a docker

** Docker for Mac

** Installing Docker on Windows Server 2016

** Installing Docker on Linux
** Module Summary



* Working with Containers

** What Is a Container?

- virtual machine hypervisor

  - file:../../images/docker.org_20200413_235441_sv1w28.png

- Docker
  - file:../../images/docker.org_20200413_235501_X2ksF7.png

    
** The 'docker run' Command

#+CAPTION:docker version
#+BEGIN_SRC shell script
[vagrant@dropwizard ~]$ docker version

Client: Docker Engine - Community
 Version:           19.03.8
 API version:       1.40
 Go version:        go1.12.17
 Git commit:        afacb8b
 Built:             Wed Mar 11 01:27:04 2020
 OS/Arch:           linux/amd64
 Experimental:      false

Server: Docker Engine - Community
 Engine:
  Version:          19.03.8
  API version:      1.40 (minimum version 1.12)
  Go version:       go1.12.17
  Git commit:       afacb8b
  Built:            Wed Mar 11 01:25:42 2020
  OS/Arch:          linux/amd64
  Experimental:     false
 containerd:
  Version:          1.2.13
  GitCommit:        7ad184331fa3e55e52b890ea95e65ba581ae3429
 runc:
  Version:          1.0.0-rc10
  GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd
 docker-init:
  Version:          0.18.0
#+END_SRC



We are creating a container below
#+BEGIN_SRC shell script

[vagrant@dropwizard ~]$ docker run hello-world
Unable to find image 'hello-world:latest' locally
latest: Pulling from library/hello-world
1b930d010525: Pull complete
Digest: sha256:f9dfddf63636d84ef479d645ab5885156ae030f611a56f3a7ac7f2fdd86d7e4e
Status: Downloaded newer image for hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/get-started/

#+END_SRC



- all the container did was open up and say "Hello from Docker" It's no longer running. Will show you below
  - prints to screen then exits

Not running
#+BEGIN_SRC go
[vagrant@dropwizard ~]$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
#+END_SRC

- You can see that it was running at one point though below:

using -a flag
#+BEGIN_SRC shell script
[vagrant@dropwizard ~]$ docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMESe13c18cbdd12        hello-world         "/hello"            5 minutes ago       Exited (0) 5 minutes ago                       naughty_albattani
#+END_SRC

shows images that were local
#+BEGIN_SRC shell script
[vagrant@dropwizard ~]$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
hello-world         latest              fce289e99eb9        15 months ago       1.84kB

#+END_SRC

- Quick recap

  - Docker client and Docker Daemon on the same host

    - docker client made api calls to the talker daemon

    - docker says start me a container with a hello world image

      - went out to docker hub to get the image

    - on premise registry is likely would cerner would have for their own applications

      - the docker daemon did not have it, then it pulled it and made a copy
	- at that point it created the container

file:../../images/docker.org_20200414_000936_a2z6Dc.png











** Theory of Pulling and Running Containers

** Working with Images

- images are just stopped containers

- containers are just running images

pulling latest apline image
#+BEGIN_SRC go
docker pull alpine
#+END_SRC

https://hub.docker.com/_/ubuntu

#+CAPTION:pulling the lastest docker image
#+BEGIN_SRC go
docker pull ubuntu
#+END_SRC

#+CAPTION:pull specific image
#+BEGIN_SRC go
docker pull ubuntu:14:04
#+END_SRC

#+CAPTION:removes the docker image that you specify
#+BEGIN_SRC go
docker rmi ubuntu:14.04
#+END_SRC

#+CAPTION:
#+BEGIN_SRC go
[vagrant@dropwizard ~]$ docker pull ubuntu
Using default tag: latest
latest: Pulling from library/ubuntu
5bed26d33875: Pull complete
f11b29a9c730: Pull complete
930bda195c84: Pull complete
78bf9a5ad49e: Pull complete
Digest: sha256:bec5a2727be7fff3d308193cfde3491f8fba1a2ba392b7546b43a051853a341d
Status: Downloaded newer image for ubuntu:latest
docker.io/library/ubuntu:latest
#+END_SRC


#+CAPTION:here is how you see all your images
#+BEGIN_SRC go
[vagrant@dropwizard ~]$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ubuntu              latest              4e5021d210f6        3 weeks ago         64.2MB
hello-world         latest              fce289e99eb9        15 months ago       1.84kB
#+END_SRC





** Container Lifecycle

lifecycle of a container is shortlived

- when you create a container, it goes into a running state. You can stop and start it as much as you want

- the only way to actually lose data is by removing the container like so

#+CAPTION:
#+BEGIN_SRC go
docker rm <container>
#+END_SRC

- this is a second level image, not top level like before
start the container in detached mode (throw it in the background). also mapping some network ports (web server listening on port 80) map to port 8080 on the docker host
#+BEGIN_SRC go
docker run -d --name web -p 80:8080 nigelpoulton/pluralsight-docker-ci

[vagrant@dropwizard ~]$ docker run -d --name web -p 80:8080 nigelpoulton/pluralsight-docker-ci
Unable to find image 'nigelpoulton/pluralsight-docker-ci:latest' locally
latest: Pulling from nigelpoulton/pluralsight-docker-ci
729ec3a6ada3: Pull complete
f0a3eea3dca0: Pull complete
e07851c50ad6: Pull complete
f78e7cd1f8dc: Pull complete
7cad1fbd2f07: Pull complete
22835c51693f: Pull complete
Digest: sha256:61bc64850a5f2bfbc65967cc33feaae8a77c8b49379c55aaf05bb02dcee41451
Status: Downloaded newer image for nigelpoulton/pluralsight-docker-ci:latest
41fa6d0761b4e1966ba32228cf54b3700765ffd01c1b08ed521f35c7d6054584
#+END_SRC


*** vagrant config on workstation

add the following to docker vagrant file
#+BEGIN_SRC go
  config.vm.network "forwarded_port", guest: 80, host: 80
  config.vm.network "public_network"
#+END_SRC


#+BEGIN_SRC go
vagrant reload
vagrant ssh
docker start web
#+END_SRC

#+CAPTION:get the ip address of the docker host
#+BEGIN_SRC go
[vagrant@dropwizard ~]$ ifconfig
docker0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255
        inet6 fe80::42:33ff:feae:e38  prefixlen 64  scopeid 0x20<link>
        ether 02:42:33:ae:0e:38  txqueuelen 0  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 8  bytes 656 (656.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

enp0s3: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 10.0.2.15  netmask 255.255.255.0  broadcast 10.0.2.255
        inet6 fe80::a00:27ff:fe5a:e9e7  prefixlen 64  scopeid 0x20<link>
        ether 08:00:27:5a:e9:e7  txqueuelen 1000  (Ethernet)
        RX packets 586  bytes 68059 (66.4 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 411  bytes 72841 (71.1 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

enp0s8: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.1.228  netmask 255.255.255.0  broadcast 192.168.1.255
#+END_SRC

- in this case it is 192.168.1.228

http://192.168.1.228:80

you should get your page











** back to container

- let's log in to the container and look inside

in the bash shell of the container we just created
#+BEGIN_SRC go
docker run -it --name temp ubuntu:latest /bin/bash
#+END_SRC

- you will not be able to do much in here like ping google.com or even vi into /etc/hosts

  - that is because it is extremely barebones. not meant to do much else

    - ps and top are even just temporary processes that usually do not run

here is some output to show you how little it is doing
#+BEGIN_SRC go
top - 22:34:04 up 15 min,  0 users,  load average: 0.00, 0.02, 0.05
Tasks:   2 total,   1 running,   1 sleeping,   0 stopped,   0 zombie
%Cpu(s):  0.2 us,  0.0 sy,  0.0 ni, 99.8 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
KiB Mem :   756608 total,   125788 free,   270632 used,   360188 buff/cache
KiB Swap:  2097148 total,  2096884 free,      264 used.   362928 avail Mem

  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
    1 root      20   0   18496   2040   1636 S   0.0  0.3   0:00.01 bash
   11 root      20   0   36616   1780   1328 R   0.0  0.2   0:00.00 top

ctrl + p + q to exit
#+END_SRC

#+CAPTION:the following commands will stop all containers, remove them, and then remove the images they were using
#+BEGIN_SRC go
[vagrant@dropwizard ~]$ docker stop $(docker ps -aq)
130dac25ee36
ebe6db2d5dc8
41fa6d0761b4
e13c18cbdd12
[vagrant@dropwizard ~]$ docker rm $(docker ps -aq)
130dac25ee36
ebe6db2d5dc8
41fa6d0761b4
e13c18cbdd12
[vagrant@dropwizard ~]$ docker rmi $(docker images -q)
Untagged: ubuntu:latest
Untagged: ubuntu@sha256:bec5a2727be7fff3d308193cfde3491f8fba1a2ba392b7546b43a051853a341d
Deleted: sha256:4e5021d210f65ebe915670c7089120120bc0a303b90208592851708c1b8c04bd
Deleted: sha256:1d9112746e9d86157c23e426ce87cc2d7bced0ba2ec8ddbdfbcc3093e0769472
Deleted: sha256:efcf4a93c18b5d01aa8e10a2e3b7e2b2eef0378336456d8653e2d123d6232c1e
Deleted: sha256:1e1aa31289fdca521c403edd6b37317bf0a349a941c7f19b6d9d311f59347502
Deleted: sha256:c8be1b8f4d60d99c281fc2db75e0f56df42a83ad2f0b091621ce19357e19d853
Untagged: nigelpoulton/pluralsight-docker-ci:latest
Untagged: nigelpoulton/pluralsight-docker-ci@sha256:61bc64850a5f2bfbc65967cc33feaae8a77c8b49379c55aaf05bb02dcee41451
Deleted: sha256:dd7a37fe7c1e6f3b9bcd1c51cad0a54fde3f393ac458af3b009b2032978f599d
Deleted: sha256:62c2dc8575cf79fddcbf8466311d893100d89d8fe30532cd8949a6399bf0c59e
Deleted: sha256:41d87f201eb33b39af235cb7aae8dce404407dbff9654886854ef076fedec0ed
Deleted: sha256:fec1957285f8b705269c691bd78a70584888e4a7674a7f3e74351f131926edcf
Deleted: sha256:27a18cba123036ad9cedaeed9dc75d3a55c81bf2da5c21837a2f23583882aee4
Deleted: sha256:937d6f78d3ffb0b5bd95a1e8a39974008915ac044f7c7c89a18962efe973ca81
Deleted: sha256:9e607bb861a7d58bece26dd2c02874beedd6a097c1b6eca5255d5eb0d2236983
Untagged: hello-world:latest
Untagged: hello-world@sha256:f9dfddf63636d84ef479d645ab5885156ae030f611a56f3a7ac7f2fdd86d7e4e
Deleted: sha256:fce289e99eb9bca977dae136fbe2a82b6b7d4c372474c9235adc1741675f587e
Deleted: sha256:af0b15c8625bb1938f1d7b17081031f649fd14e6b233688eea3c5483994a66a3
#+END_SRC


** Lesson Recap

- docker run is just a client command

  - file:../../images/docker.org_20200414_174308_6t4bIJ.png

- docker is just talking to the daemon which is doing all the heavy lfiting through the docker api


- here are the commands we learned

starts a new container
#+BEGIN_SRC go
docker run
#+END_SRC

copies images to the docker ost
#+BEGIN_SRC go
docker pull
#+END_SRC

#+CAPTION:lists images on the docker host
#+BEGIN_SRC go
docker images
#+END_SRC

#+CAPTION:removes images from the docker host
#+BEGIN_SRC go
docker rmi
#+END_SRC

#+CAPTION:lists running containers
#+BEGIN_SRC go
docker ps
#+END_SRC

#+CAPTION:stops running containers
#+BEGIN_SRC go
docker stop
#+END_SRC

#+CAPTION:removes (deletes) stopped containers
#+BEGIN_SRC go
docker rm
#+END_SRC


* Swarm Mode and Microservices

** Module Intro

- We are going to build a swarm

  - start using services, scale them, and update them in this section

- deploy a multi-service app with stacks and bundles


** Swarm Mode Theory

- cluster = a swarm

  - all about true native clustering

- manager nodes maintain the swarm

  - the more managers you have, the longer it takes to come to a conclusion
  - only one is a leader

- worker nodes execute tasks

- services
  - declaritive way of running tasks

go create a service named web-fe with 5 instances of the continual task it is going to run
#+BEGIN_SRC go
docker service create --name web-fe --replicas 5 ...
#+END_SRC

- this is desired state. docker going to make sure actual state = desired state

- tasks

  - assigned to workers

  - task is more or less a container

- swarm consists of manager and worker nodes

  - manager splits the service into tasks

  - schedules tasks against available nodes in the swarm

    - worker node executes the tasks

** Configuring Swarm Mode
*** this ended up failing
- Vagrant Setup:

  - https://https://github.com/monicagangwar/docker-swarm-vagrant


#+CAPTION:
#+BEGIN_SRC go
¦Ë vagrant status
Current machine states:

manager                   running (virtualbox)
worker-1                  running (virtualbox)
worker-2                  running (virtualbox)

This environment represents multiple VMs. The VMs are all listed
above with their current state. For more information about a specific
VM, run `vagrant status NAME`.
#+END_SRC


#+CAPTION:initialize the swarm with the IP in the vagrant file
#+BEGIN_SRC go
vagrant@manager:~$ docker swarm init --advertise-addr 192.168.100.10:2377
Swarm initialized: current node (y1qo6dke3ycq1d9sb742p1tax) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-087ujuq7iejr18p0yjc83n31l44t6k2mqneswl9prdt2lnyk9c-1tg0hg8baif9c3qf59ksmymnn 192.168.100.10:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.
#+END_SRC


#+CAPTION:take the command that was generated and run it on the worker nodes
#+BEGIN_SRC go
¦Ë vagrant ssh worker-1
Welcome to Ubuntu 14.04.6 LTS (GNU/Linux 3.13.0-170-generic x86_64)

 * Documentation:  https://help.ubuntu.com/

  System information as of Tue Apr 14 23:38:42 UTC 2020

  System load:  0.23              Users logged in:        0
  Usage of /:   4.3% of 39.34GB   IP address for eth0:    10.0.2.15
  Memory usage: 19%               IP address for eth1:    192.168.100.11
  Swap usage:   0%                IP address for docker0: 172.17.0.1
  Processes:    84

  Graph this data and manage this system at:
    https://landscape.canonical.com/

New release '16.04.6 LTS' available.
Run 'do-release-upgrade' to upgrade to it.



vagrant@worker-1:~$
vagrant@worker-1:~$ docker swarm join --token SWMTKN-1-087ujuq7iejr18p0yjc83n31l44t6k2mqneswl9prdt2lnyk9c-1tg0hg8baif9c 3qf59ksmymnn 192.168.100.10:2377
This node joined a swarm as a worker.
vagrant@worker-1:~$
vagrant@worker-1:~$
vagrant@worker-1:~$ exit
logout
Connection to 127.0.0.1 closed.

C:\Users\Evan\Desktop\vagrant_lab\docker-lab\docker-swarm-vagrant (master -> origin)
¦Ë vagrant ssh worker-2
Welcome to Ubuntu 14.04.6 LTS (GNU/Linux 3.13.0-170-generic x86_64)

 * Documentation:  https://help.ubuntu.com/

  System information as of Tue Apr 14 23:40:05 UTC 2020

  System load:  0.07              Users logged in:        0
  Usage of /:   4.3% of 39.34GB   IP address for eth0:    10.0.2.15
  Memory usage: 19%               IP address for eth1:    192.168.100.12
  Swap usage:   0%                IP address for docker0: 172.17.0.1
  Processes:    83

  Graph this data and manage this system at:
    https://landscape.canonical.com/

New release '16.04.6 LTS' available.
Run 'do-release-upgrade' to upgrade to it.


vagrant@worker-2:~$ docker swarm join --token SWMTKN-1-087ujuq7iejr18p0yjc83n31l44t6k2mqneswl9prdt2lnyk9c-1tg0hg8baif9c 3qf59ksmymnn 192.168.100.10:2377
This node joined a swarm as a worker.
#+END_SRC



- Now go back to your manager and see if you can see the workers you just added

we only have one node and it is the leader. If there were more they would show as 'Reachable'
#+BEGIN_SRC go
vagrant@manager:~$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
y1qo6dke3ycq1d9sb742p1tax *   manager             Ready               Active              Leader              18.06.3-cet5oyge8yi03guttihfblt8kdu     worker-1            Ready               Active                                  18.06.3-ceu5gknij4qqpkyivd2nkot57nq     worker-2            Ready               Active                                  18.06.3-cevagrant@manager:~$

#+END_SRC


- you can add managers the same way with the following command to generate a command:

this is how you would do it. not going to in this lab
#+BEGIN_SRC go
vagrant@manager:~$ docker swarm join-token manager
To add a manager to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-087ujuq7iejr18p0yjc83n31l44t6k2mqneswl9prdt2lnyk9c-8yebc12bg5mf50ew4tpbjqdti 192.168.100.10:2377

#+END_SRC


- creates an overlay network with the name specified which each of the container can join
random-network will be the overlay network that our application containers live on
-d tells which driver to use. Currently overlay driver is being used

#+CAPTION:
#+BEGIN_SRC go
vagrant@manager:~$ docker network create -d overlay my-overlay
59da67u0bhow6l1hcmwp2gvnc
#+END_SRC


- might take a little bit since it has to pull the image down for every node

  - running into an error here:

#+CAPTION:this is an error
#+BEGIN_SRC go
vagrant@manager:~$ docker service create --name psight1 -p 8080:8080 --replicas 5 nigelpoulton/pluralsight-docker-ci
7ts4gxy2cfw6eyn4lw3n2nhq3
overall progress: 0 out of 5 tasks
overall progress: 0 out of 5 tasks
overall progress: 0 out of 5 tasks
overall progress: 0 out of 5 tasks
overall progress: 0 out of 5 tasks
overall progress: 0 out of 5 tasks
overall progress: 0 out of 5 tasks
overall progress: 0 out of 5 tasks
overall progress: 0 out of 5 tasks
overall progress: 0 out of 5 tasks
overall progress: 0 out of 5 tasks
overall progress: 0 out of 5 tasks
overall progress: 0 out of 5 tasks
1/5: ready     [======================================>            ]
2/5: ready     [======================================>            ]
3/5: ready     [======================================>            ]
4/5: ready     [======================================>            ]
5/5: ready     [======================================>            ]
^COperation continuing in background.
Use `docker service ps 7ts4gxy2cfw6eyn4lw3n2nhq3` to check progress.
vagrant@manager:~$ docker service ps 7ts4gxy2cfw6eyn4lw3n2nhq3
ID                  NAME                IMAGE                                       NODE                DESIRED STATE       CURRENT STATE                     ERROR                              PORTS
njopbxxqozad        psight1.1           nigelpoulton/pluralsight-docker-ci:latest   worker-2            Running             Starting less than a second ago
9b68yk1rq4gh         \_ psight1.1       nigelpoulton/pluralsight-docker-ci:latest   worker-1            Shutdown            Failed 3 seconds ago              "starting container failed: OC¡­"
ectzwhjtcyck         \_ psight1.1       nigelpoulton/pluralsight-docker-ci:latest   manager             Shutdown            Failed 10 seconds ago             "starting container failed: OC¡­"
skf2unhgsvbh         \_ psight1.1       nigelpoulton/pluralsight-docker-ci:latest   manager             Shutdown            Failed 15 seconds ago             "starting container failed: OC¡­"
u8gxf5ybaza6         \_ psight1.1       nigelpoulton/pluralsight-docker-ci:latest   worker-2            Shutdown            Failed 21 seconds ago             "starting container failed: OC¡­"
...

#+CAPTION:you can view all the output by passing this flag
#+BEGIN_SRC go
docker service ps --no-trunc wamnlhva5t4zhfmihtbh6lhvn
#+END_SRC


## went ahead and removed it

vagrant@manager:~$ docker service rm psight1

#+END_SRC






*** Second Attempt

- https://medium.com/@gauravtalele/docker-swarm-cluster-setup-with-vagrant-bca5ddb7a672


- Follow these steps and continue with pluralsight course:


 got it working
#+BEGIN_SRC go
vagrant@manager:~$ docker service create --name psight1 -p 8080:8080 --replicas 5 nigelpoulton/pluralsight-docker-ci
m2zu80xa6xklraxbxx7oj4o2j
overall progress: 0 out of 5 tasks
overall progress: 0 out of 5 tasks
overall progress: 0 out of 5 tasks
1/5: preparing [=================================>                 ]
2/5: preparing [=================================>                 ]
3/5: preparing [=================================>                 ]
4/5: preparing [=================================>                 ]
5/5: preparing [=================================>                 ]
^COperation continuing in background.
Use `docker service ps m2zu80xa6xklraxbxx7oj4o2j` to check progress.
vagrant@manager:~$ docker service ps m2zu80xa6xklraxbxx7oj4o2j
ID                  NAME                IMAGE                                       NODE                DESIRED STATE       CURRENT STATE                    ERROR               PORTS
5r9exmy840dq        psight1.1           nigelpoulton/pluralsight-docker-ci:latest   worker02            Running             Running less than a second ago
dytl0pbj3snu        psight1.2           nigelpoulton/pluralsight-docker-ci:latest   worker01            Running             Running 2 seconds ago
kx5wtjmvfd3x        psight1.3           nigelpoulton/pluralsight-docker-ci:latest   worker02            Running             Running 1 second ago
i9agm7xsi36p        psight1.4           nigelpoulton/pluralsight-docker-ci:latest   manager             Running             Running 3 seconds ago
slpu9nfbms4z        psight1.5           nigelpoulton/pluralsight-docker-ci:latest   worker01            Running             Running 3 seconds ago

#+END_SRC


- grab the IP address of both workers

#+CAPTION:
#+BEGIN_SRC go
ifconfig
#+END_SRC

- access locally
http://10.100.199.201:8080/
http://10.100.199.202:8080/

- you can even hit it from the manager node:

http://10.100.199.200:8080/


file:../../images/docker.org_20200414_202242_OSUFM0.png



- wrap up what we did:

- you can hit any of the nodes on port 8080, even the manager
file:../../images/docker.org_20200414_202928_SMuRe8.png

- the swarmwide mesh container load balancer shown here, will balance across all the containers in the service

  - fully container aware load balancer "routing mesh"

  - 
file:../../images/docker.org_20200414_203011_1FuTy6.png



** Services


** Scaling Services

- 

#+CAPTION:
#+BEGIN_SRC go
vagrant@manager:~$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE                                       PORTS m2zu80xa6xkl        psight1             replicated          5/5                 nigelpoulton/pluralsight-docker-ci:latest   *:8080->8080/tcp
#+END_SRC


#+CAPTION:
#+BEGIN_SRC go
vagrant@manager:~$ docker service ps psight1
ID                  NAME                IMAGE                                       NODE                DESIRED STATE       CURRENT STATE                 ERROR               PORTS
xdonhierynle        psight1.1           nigelpoulton/pluralsight-docker-ci:latest   manager             Running             Running 3 minutes ago
5r9exmy840dq         \_ psight1.1       nigelpoulton/pluralsight-docker-ci:latest   worker02            Shutdown            Shutdown about a minute ago
di8claalixnm        psight1.2           nigelpoulton/pluralsight-docker-ci:latest   manager             Running             Running 3 minutes ago
dytl0pbj3snu         \_ psight1.2       nigelpoulton/pluralsight-docker-ci:latest   worker01            Shutdown            Shutdown 2 minutes ago
z24xnt4cp6ag        psight1.3           nigelpoulton/pluralsight-docker-ci:latest   manager             Running             Running 3 minutes ago
kx5wtjmvfd3x         \_ psight1.3       nigelpoulton/pluralsight-docker-ci:latest   worker02            Shutdown            Shutdown about a minute ago
i9agm7xsi36p        psight1.4           nigelpoulton/pluralsight-docker-ci:latest   manager             Running             Running 21 hours ago
2irl5rq5qwep        psight1.5           nigelpoulton/pluralsight-docker-ci:latest   manager             Running             Running 3 minutes ago
slpu9nfbms4z         \_ psight1.5       nigelpoulton/pluralsight-docker-ci:latest   worker01            Shutdown            Shutdown 2 minutes ago
#+END_SRC

- actual state matches desired state

  - the ones with \_ next to it indicate that it is shutdown



- Now we we want to add running instances to this to scal the service:

#+CAPTION:
#+BEGIN_SRC go
vagrant@manager:~$ docker service scale psight1=7
psight1 scaled to 7
overall progress: 7 out of 7 tasks
1/7: running   [==================================================>]
2/7: running   [==================================================>]
3/7: running   [==================================================>]
4/7: running   [==================================================>]
5/7: running   [==================================================>]
6/7: running   [==================================================>]
7/7: running   [==================================================>]
verify: Service converged


vagrant@manager:~$ docker service ps psight1 | grep Running
ID                  NAME                IMAGE                                       NODE                DESIRED STATE       CURRENT STATE                 ERROR               PORTS
xdonhierynle        psight1.1           nigelpoulton/pluralsight-docker-ci:latest   manager             Running             Running 10 minutes ago
di8claalixnm        psight1.2           nigelpoulton/pluralsight-docker-ci:latest   manager             Running             Running 10 minutes ago
z24xnt4cp6ag        psight1.3           nigelpoulton/pluralsight-docker-ci:latest   manager             Running             Running 10 minutes ago
i9agm7xsi36p        psight1.4           nigelpoulton/pluralsight-docker-ci:latest   manager             Running             Running 22 hours ago
2irl5rq5qwep        psight1.5           nigelpoulton/pluralsight-docker-ci:latest   manager             Running             Running 10 minutes ago
hgqxfm3eod5g        psight1.6           nigelpoulton/pluralsight-docker-ci:latest   worker02            Running             Running 2 minutes ago
4hmxvdgxr3xi        psight1.7           nigelpoulton/pluralsight-docker-ci:latest   worker01            Running             Running 2 minutes ago
#+END_SRC


- 







** Rolling Updates

- rolling updates 
  - always been a pain, rolling updates with containers is better


- Going to create an overlay network below
  - also going to create a service on top of it
    - notice the :1 at the end. That is a version tag

#+CAPTION:
#+BEGIN_SRC go
vagrant@manager:~$ docker network create -d overlay ps-net


vagrant@manager:~$ docker service create --name psight2 --network ps-net -p 80:80 --replicas 12 nigelpoulton/tu-demo:v1
w4kktdn6k46p5j4zf5igz98nc
overall progress: 12 out of 12 tasks
1/12: running   [==================================================>]
2/12: running   [==================================================>]
3/12: running   [==================================================>]
4/12: running   [==================================================>]
5/12: running   [==================================================>]
6/12: running   [==================================================>]
7/12: running   [==================================================>]
8/12: running   [==================================================>]
9/12: running   [==================================================>]
10/12: running   [==================================================>]
11/12: running   [==================================================>]
12/12: running   [==================================================>]


vagrant@manager:~$ docker service ps psight2
ID                  NAME                IMAGE                     NODE                DESIRED STATE       CURRENT STATE                ERROR               PORTS
tbo7pcn491oi        psight2.1           nigelpoulton/tu-demo:v1   worker02            Running             Running about a minute ago
m15tnlyqei6u        psight2.2           nigelpoulton/tu-demo:v1   manager             Running             Running about a minute ago
t97wldzlj00m        psight2.3           nigelpoulton/tu-demo:v1   manager             Running             Running about a minute ago
um78ta64pdyn        psight2.4           nigelpoulton/tu-demo:v1   worker01            Running             Running about a minute ago
yzt6ybgbesc4        psight2.5           nigelpoulton/tu-demo:v1   manager             Running             Running about a minute ago
pwn23ocjr462        psight2.6           nigelpoulton/tu-demo:v1   worker02            Running             Running about a minute ago
qt345jnyfjdl        psight2.7           nigelpoulton/tu-demo:v1   worker01            Running             Running about a minute ago
snra2jl9k1s1        psight2.8           nigelpoulton/tu-demo:v1   worker02            Running             Running about a minute ago
e86rdmhuvvft        psight2.9           nigelpoulton/tu-demo:v1   manager             Running             Running about a minute ago
72yh2woehpic        psight2.10          nigelpoulton/tu-demo:v1   worker01            Running             Running about a minute ago
k2xaihxxhhir        psight2.11          nigelpoulton/tu-demo:v1   worker02            Running             Running about a minute ago
i2mwkryn64ll        psight2.12          nigelpoulton/tu-demo:v1   worker01            Running             Running about a minute ago
#+END_SRC

- notice how there are two tasks per worker node
  - UpdateConfig is what we are going to change

#+CAPTION:
#+BEGIN_SRC go
vagrant@manager:~$ docker service inspect --pretty psight2

ID:             w4kktdn6k46p5j4zf5igz98nc
Name:           psight2
Service Mode:   Replicated
 Replicas:      12
Placement:
UpdateConfig:
 Parallelism:   1
 On failure:    pause
 Monitoring Period: 5s
 Max failure ratio: 0
 Update order:      stop-first
RollbackConfig:
 Parallelism:   1
 On failure:    pause
 Monitoring Period: 5s
 Max failure ratio: 0
 Rollback order:    stop-first
ContainerSpec:
 Image:         nigelpoulton/tu-demo:v1@sha256:674cb034447ab34d442b8df03e0db6506a99390a1e282d126fb44af8598e4d2a
 Init:          false
Resources:
Networks: ps-net
Endpoint Mode:  vip
Ports:
 PublishedPort = 80
  Protocol = tcp
  TargetPort = 80
  PublishMode = ingress

#+END_SRC

- showing rolling event going from v:1 to v:2. update 2 at a time and wait 10 seconds in between

#+CAPTION:
#+BEGIN_SRC go
docker service update --image nigelpoulton/tu-demo:v2 --update-parallelism 2 --update-delay 10s psight2

vagrant@manager:~$ docker service ps psight2 | grep :v2
qr043j59552u        psight2.1           nigelpoulton/tu-demo:v2   worker02            Running             Running about a minute ago
s2v1bon48u7w        psight2.2           nigelpoulton/tu-demo:v2   manager             Running             Running about a minute ago
i7kiba3xeb38        psight2.3           nigelpoulton/tu-demo:v2   manager             Running             Running about a minute ago
svdpcsiln02d        psight2.4           nigelpoulton/tu-demo:v2   worker01            Running             Running about a minute ago
wwt744notimr        psight2.5           nigelpoulton/tu-demo:v2   manager             Running             Running about a minute ago
jrie6ilhrtvb        psight2.6           nigelpoulton/tu-demo:v2   worker02            Running             Running 43 seconds ago
8vhcvba8ysih        psight2.7           nigelpoulton/tu-demo:v2   worker01            Running             Running about a minute ago
t6cabwqzcgiw        psight2.8           nigelpoulton/tu-demo:v2   worker02            Running             Running 43 seconds ago
i7akkjtqfe5g        psight2.9           nigelpoulton/tu-demo:v2   manager             Running             Running 57 seconds ago
nk8nte95k38e        psight2.10          nigelpoulton/tu-demo:v2   worker01            Running             Running 57 seconds ago
n0xmq9feht67        psight2.11          nigelpoulton/tu-demo:v2   worker01            Running             Running about a minute ago
k9uz4cv4krcs        psight2.12          nigelpoulton/tu-demo:v2   worker02            Running             Running about a minute ago
#+END_SRC 

** Stacks and DABs

stacks and bundles

stack is an application made up of multiple services files
- made up of DAB files


here is the app we are going to work with:

file:../../images/docker.org_20200415_181638_M3CuEF.png

it is made up of 5 micro services


docker compose
- before stacks and dabs
  - pass docker compose yml files compose.yml files


** Recap


file:../../images/docker.org_20200415_182837_14FDE8.png

#+CAPTION:
#+BEGIN_SRC go
docker swarm init ...
#+END_SRC

#+CAPTION:joinging worker with manageer
#+BEGIN_SRC go
docker swarm join ...
#+END_SRC

#+CAPTION:scaling services
#+BEGIN_SRC go
docker service create ...
#+END_SRC

#+CAPTION:turning more instance
#+BEGIN_SRC go
docker service scale ...
#+END_SRC

#+CAPTION:update from v:1 to v:2
#+BEGIN_SRC go
docker service update ...
#+END_SRC

#+CAPTION:
#+BEGIN_SRC go
docker stack deploy
#+END_SRC

file:../../images/docker.org_20200415_183147_dhlX7F.png


* What Next!

** Next Steps

