#+SETUPFILE: ../../styles/readtheorg.setup
#+TITLE: Kubernetes

* Links

https://app.pluralsight.com/library/courses/getting-started-kubernetes/table-of-contents

* Vagrant Lab

https://blog.exxactcorp.com/building-a-kubernetes-cluster-using-vagrant/


#+CAPTION:
#+BEGIN_SRC go
git clone https://exxsyseng@bitbucket.org/exxsyseng/k8s_centos.git      # Centos k8s Cluster
git clone https://exxsyseng@bitbucket.org/exxsyseng/k8s_ubuntu.git      # Ubuntu k8s Cluster
#+END_SRC



* Course Overview

** Course Introduction

fundamental parts of kubernetes

- going to install kubernetes for a lab

- going to work with pods

- going to do some deployments



* Course Introduction

** Course intro

* What Is Kubernetes?

** Kubernetes: Where It Came From

- written in go/golang
  - https://github.com/kubernetes/kubernetes

- came from google
- borg
  - omega
    - kubernetes


Kubernetes = K8s



** Kubernetes: What and Why

Containers
- Challenges they bring
  - brings new scalability challenges

  - application developers do not care about cpu is running their code

  - Pets vs Cattle

    - kubernetes, I got this app and it consists of these containers

      - kubernetes take care of all the hard work and logistics


- what is it made up of?

  - standard package format

  - manifest


- very platfrom agnostic

  - as long as you can install the agent, it wil work


- lets you target deployments

  - it makes decisions about to where to run it

- Kubernetes is moving very fast

  - get your hands dirty and keep playing with it

* Kubernetes Architecture

** Module Intro

Big picture view

- masters

- nodes

- pods

- Services

  - networking

- deployments

** Big Picture View

Kubernetes is just an orchestrator for microservice apps

file://wsl$/Ubuntu-18.04/home/erauner12/pkb/lab/course/kubernetes.org_20200415_193424_e4YYOS.png

package up your application and give it to the cluster

file://wsl$/Ubuntu-18.04/home/erauner12/pkb/lab/course/kubernetes.org_20200415_193726_LpcgYX.png


- Masters

  - master control plane

  - 

- Nodes

  - do the actual work
  - report back to master about the changes that are happening


- package the application it up in what is called a deployment

  - manifest file tells cluster what configuration settings it has





** Masters

platform agnostic
file://wsl$/Ubuntu-18.04/home/erauner12/pkb/lab/course/kubernetes.org_20200415_194008_jZjkb2.png
- all it wants is linux
  - linux does not care if it running on bare metal,openstack, cloud


kube-apiserver
- front-end to the control plane
- exposes the API (REST)
- Consumes JSON via manfiest files
  - declare the state of our app for. record of intent


- Cluster Store

  - perisent sotrage
  - cluster state and config
  - uses etcd
    - source of truth for the cluster


- kube controller-manager

  - controller of controllers

  - node controller

  - endpoints controller

  - namespace controller

  - watches for changes

  - helps maintain desired state
    - current state = desired state

- kuber-scheduler

  - watches apiserver for new pods

  - assigns work to nodes

file://wsl$/Ubuntu-18.04/home/erauner12/pkb/lab/course/kubernetes.org_20200415_194815_YRQj8A.png


- issuing commands to the master
  - master = api server
    - that is where you are actually issuing commands

- kubectl talks to the apiserver (master) via json files
  - works gets passed to nodes from the scheduler

file://wsl$/Ubuntu-18.04/home/erauner12/pkb/lab/course/kubernetes.org_20200415_195033_dNRDgH.png


** Desired State and the Declarative Model


** Pods

** Services


** Deployments


** Bringing It Home

* Installing Kubernetes

** Module Intro


** Minikube


** Google Container Engine


** Installing in AWS with kops

** Installing Manually with kubeadm


** Module Summary


* Working with Pods


** Pod Theory


** Deploying Your First Pod


** Deploying Pods via Replication Controllers


** Module Summary


** Kubernetes Services


** Module Intro


** The Theory


** Creating a Service the Iterative Way


** Creating a Service the Declarative Way


** In the Real World


** Summary


* Kubernetes Deployments


** Module Intro


** Deployment Theory


** Creating Your First Kubernetes Deployment


** Updating a Deployment


** Module Summary


* What Next?


** What Next?
